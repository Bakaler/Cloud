const jsonwebtoken = require('jsonwebtoken');
const bodyParser = require('body-parser');
const pouches = require('./pouches');
const ds = require('../datastore');
const express = require('express');
const router = express.Router();
const oauth = require("./oauth");
router.use(bodyParser.json());

const oauth2Client = oauth.get_oauth2Client()
const datastore = ds.datastore;
const SEED = 'Seed'

const URL = "https://portfolio-bakera5.ue.r.appspot.com"
//const URL = "http://localhost:8888";


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
/* ------------- Begin Seed Model Functions ------------- */

async function post_seed(genus, biome, weight){
    /*
    Create a Seed

        id      :       Auto-generated by datastore
        pouch   :       OBJECT - Current pouch or None
        genus   :       STRING - The type of seed
        biome   :       STRING - The biome inwhich the seed is native too
        weight  :       INT    - Weight in Ounces
        self    :       String - URI Path to entity item

    */

    var key = datastore.key(SEED);
    const new_seed = {
        "genus" : genus,
        "biome" : biome,
        "weight": weight,
        "pouch" : null
    };

    return datastore.save({"key":key, "data":new_seed}).then(() => {return [key, new_seed]});

}


async function patch_seed(id, genus, biome, weight, pouch, self) {
    const key = datastore.key([SEED, parseInt(id, 10)]);
    const seed = {
        "genus" : genus,
        "biome" : biome,
        "weight" : weight,
        "pouch" : pouch,
        "self": self
    };

    return datastore.save({"key" : key, "data" : seed}).then(() => {return [key, seed]});
}


async function put_seed(id, genus, biome, weight, pouch, self) {
    const key = datastore.key([SEED, parseInt(id, 10)]);
    const seed = {
        "genus" : genus,
        "biome" : biome,
        "weight" : weight,
        "pouch" : pouch,
        "self": self
    };

    return datastore.save({"key" : key, "data" : seed}).then(() => {return [key, seed]});
}


async function get_seed(seed_id){
    const key = datastore.key([SEED, parseInt(seed_id, 10)]);
    return datastore.get(key).then((entity) => {
        if (entity[0] === undefined || entity[0] === null) {
            // No entity found, Do no add the seed_id attribute
            return entity;
        } else {
            // Uses Array.map to call function fromDatastore. This function
            // will add the seed_id attribure to every element in the array entity
            return entity.map(ds.fromDatastore);
        }
  })
}


async function get_seeds(req){
    var q = datastore.createQuery(SEED).limit(5);
    const results = {};
    if(Object.keys(req.query).includes("cursor")){
        q = q.start(req.query.cursor);
    }
	return datastore.runQuery(q).then( (entities) => {
            results.seeds = entities[0].map(ds.fromDatastore);
            if(entities[1].moreResults !== ds.Datastore.NO_MORE_RESULTS ){
                results.next = req.protocol + "://" + req.get("host") + req.baseUrl + "?cursor=" + entities[1].endCursor;
            }
			return results;
		});
}


async function delete_seed(seed_id){

    const seed_key = datastore.key([SEED, parseInt(seed_id,10)]);
    return datastore.get(seed_key)
    .then( (seed_entity) => {
        if (seed_entity[0] === undefined || seed_entity[0] === null) {
            // No entity found, Do no add the id attribute
            return seed_entity;
        }
        if (seed_entity[0].pouch !== null){
            pouches.remove_seed_from_pouch(seed_entity[0].pouch.id, seed_id)
        }

        return datastore.delete(seed_key);
    });

}

/* ----------------- End Model Functions ---------------- */
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
/* ------------- Begin Controller Functions ------------- */

// Create seed
router.post('/', async function(req, res){

    if(req.get('content-type') !== 'application/json'){
        res.status(415).json({'Error' : 'Server only accepts application/json data'});
    }

    else if(req.get('accept') !== 'application/json'){
        res.status(406).json({'Error' : 'Server only sends application/json data'})
    }

    // Added a Seed with missing attributes - 400
    else if (req.body.genus === undefined || req.body.biome === undefined || req.body.weight === undefined){
        res.status(400).json({"Error" : "The request object is missing at least one of the required attributes"});
    }

    // Addes a seed with invalid attributes - 400
    else if (await attributes_are_legal(req.body.genus, req.body.biome, req.body.weight) === false){
        res.status(400).json({"Error" : "The request object has at least one illegal attribute type"});
    }

    else if(Object.keys(req.body).length !== 3){
        res.status(400).json({"Error" : "The request object has too many attributes"});
    }

    // Sucessfully create a seed - 201
    else {
        post_seed(req.body.genus, req.body.biome, req.body.weight)
            .then(key => {patch_seed(key[0].id, key[1].genus, key[1].biome, key[1].weight, key[1].pouch, URL + "/seeds/" + key[0].id)
                .then(key => {res.status(201).json({
                    "id": + key[0].id, "genus": key[1].genus,
                    "biome": key[1].biome, "weight":key[1].weight,
                    "pouch":key[1].pouch, "self":key[1].self
                    })
            })
        });
    }
});


router.get('/', async function(req, res){

    if(req.get('accept') !== 'application/json'){
        res.status(406).json({'Error' : 'Server only sends application/json data'})
    }

    else {
        get_seeds(req)
            .then(async (seeds) => {
                res.status(200).json(seeds)
            })
    }
})

router.get('/:seed_id', async function(req, res){

    if(req.get('accept') !== 'application/json'){
        res.status(406).json({'Error' : 'Server only sends application/json data'})
    }

    else {
        get_seed(req.params.seed_id)
            .then(seed => {

                // Invalid seed id - 404
                if (seed[0] === undefined || seed[0] === null) {
                    res.status(404).json({'Error' : 'No seed with this seed_id exists'})
                }

                // Sucessfully returned seed
                else {
                    res.status(200).json(seed[0]);
                };
            });
    }
})


router.patch('/:seed_id', async function(req, res){

    // Edited a seed with invalid content type - 415
    if(req.get('content-type') !== 'application/json'){
        res.status(415).json({"Error" : 'Server only accepts application/json data'});
    }

    else if(req.get('accept') !== 'application/json'){
        res.status(406).json({'Error' : 'Server only sends application/json data'})
    }

    // Edited a seed with no attributes
    else if ((req.body.genus === undefined && req.body.biome === undefined) && req.body.weight === undefined){
        res.status(400).json({"Error" : "The request object is missing all attributes"});
    }

    // Edited a seed with invalid attributes - 400
    else if (await attributes_are_legal(req.body.genus, req.body.biome, req.body.weight) === false){
        res.status(400).json({"Error" : "The request object has at least one illegal attribute type"});
    }

    else {

        await get_seed(req.params.seed_id)
            .then(seed => {

                // Invalid seed id - 404
                if (seed[0] === undefined || seed[0] === null) {
                    res.status(404).json({'Error' : 'No seed with this seed_id exists'})
                }

                // Sucessfully returned seed
                else {
                    var genus;
                    var biome;
                    var weight;

                    if (req.body.genus === undefined) {
                        genus = seed[0].genus
                    } else {
                        genus = req.body.genus
                    }

                    if (req.body.biome === undefined){
                        biome = seed[0].biome
                    }
                    else {
                        biome = req.body.biome
                    }

                    if (req.body.weight === undefined){
                        weight = seed[0].weight
                    }
                    else {
                        weight = req.body.weight
                    }

                    patch_seed(req.params.seed_id, genus, biome, weight, seed[0].pouch, seed[0].self)
                        .then(key => {
                            res.status(200).json({
                            "id": + key[0].id, "genus": key[1].genus,
                            "biome": key[1].biome, "weight":key[1].weight,
                            "pouch":key[1].pouch, "self":key[1].self})
                        });
                };
            });
    }
})


router.put('/:seed_id', async function(req, res){

    // Edited a seed with invalid content type - 415
    if(req.get('content-type') !== 'application/json'){
        res.status(415).json({"Error" : 'Server only accepts application/json data'});
    }

    // Edited a seed with invalid accept type - 406
    else if(req.get('accept') !== 'application/json'){
        res.status(406).json({'Error' : 'Server only sends application/json data'})
    }

    // Edited a seed with no attributes
    else if (req.body.genus === undefined || req.body.biome === undefined || req.body.weight === undefined){
        res.status(400).json({"Error" : "The request object is missing at least one attribute"});
    }

    // Edited a seed with invalid attributes - 400
    else if (await attributes_are_legal(req.body.genus, req.body.biome, req.body.weight) === false){
        res.status(400).json({"Error" : "The request object has at least one illegal attribute type"});
    }

    else if(Object.keys(req.body).length !== 3){
        res.status(400).json({"Error" : "The request object has at least one illegal attribute type"});
    }

    else {
        get_seed(req.params.seed_id)
            .then(seed => {

                // Invalid seed id - 404
                if (seed[0] === undefined || seed[0] === null) {
                    res.status(404).json({'Error' : 'No seed with this seed_id exists'})
                }

                else {
                    put_seed(req.params.seed_id, req.body.genus, req.body.biome, req.body.weight, seed[0].pouch, seed[0].self)
                    .then(key => {
                        res.status(200).json({
                        "id": + key[0].id, "genus": key[1].genus,
                        "biome": key[1].biome, "weight":key[1].weight,
                        "pouch":key[1].pouch, "self":key[1].self})
                    });
                }
            })
    }
})


router.delete('/:seed_id', async function(req, res){

    // Edited a seed with invalid accept type - 406
    if(req.get('accept') !== 'application/json'){
        res.status(406).json({'Error' : 'Server only sends application/json data'})
    }
    else {
        delete_seed(req.params.seed_id)
        .then((entity) => {
            if (entity[0] === undefined || entity[0] === null) {
                res.status(404).json({'Error' : 'No seed with this seed_id exists'})
            } else {
                res.status(204).json(entity[0])
            }
        })
    }
})

/* ------------------- Illegal Request ------------------- */

router.delete('/', function(req, res){
    res.set('Accept', 'GET', 'POST')
    res.status(405).json({"Error" : "Method not allowed"})
});


router.patch('/', function(req, res){
    res.set('Accept', 'GET', 'POST')
    res.status(405).json({"Error" : "Method not allowed"})
});


router.put('/', function(req, res){
    res.set('Accept', 'GET', 'POST')
    res.status(405).json({"Error" : "Method not allowed"})
});

/* -------------  End Controller Functions  ------------- */
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
/* ------------- Helper Functions ----------------------- */

async function attributes_are_legal(genus, biome, weight){

    if (weight !== undefined && (typeof weight !== 'number' || weight < 0)){
        return false
    }
    else if (genus !== undefined && (typeof genus !== "string")){
        return false
    }
    else if (biome !== undefined && (typeof biome !== "string")){
        return false
    }

    return true;
}

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

module.exports = router;