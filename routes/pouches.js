const jsonwebtoken = require('jsonwebtoken');
const bodyParser = require('body-parser');
const ds = require('../datastore');
const express = require('express');
const router = express.Router();
const oauth = require("./oauth");
router.use(bodyParser.json());

const oauth2Client = oauth.get_oauth2Client()
const datastore = ds.datastore;
const POUCH = 'Pouch'

const URL = "https://portfolio-bakera5.ue.r.appspot.com"
//const URL = "http://localhost:8888";


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
/* ------------- Begin Pouch Model Functions ------------- */

async function post_pouch(capacity, weathering, brand){
    /*
    Create a Pouch

        id      :       Auto-generated by datastore
        owner   :       ID of current authenticated user
        capacity:       INT - Number of seeds a pouch can carry
        weathering:     STRING - Weather severity bag can withstand
        brand   :       STRING - Brand name of bag
        self    :       String - Post Generated

    */

    var key = datastore.key(POUCH);
    const new_pouch = {
        "owner" : jsonwebtoken.decode(oauth2Client.credentials.id_token).sub,
        "capacity" : capacity,
        "weathering" : weathering,
        "brand" : brand,
        "seeds" : []
    };

    return datastore.save({"key":key, "data":new_pouch}).then(() => {return [key, new_pouch]});

}

async function patch_pouch(id, owner, capacity, weathering, brand, seeds, self) {
    const key = datastore.key([POUCH, parseInt(id, 10)]);
    const pouch = {
        "owner" : owner,
        "capacity" : capacity,
        "weathering" : weathering,
        "brand" : brand,
        "seeds" : seeds,
        "self": self
    };

    return datastore.save({"key" : key, "data" : pouch}).then(() => {return [key, pouch]});
}

async function put_pouch(id, owner, capacity, weathering, brand, seeds, self) {
    const key = datastore.key([POUCH, parseInt(id, 10)]);
    const pouch = {
        "owner" : owner,
        "capacity" : capacity,
        "weathering" : weathering,
        "brand" : brand,
        "seeds" : seeds,
        "self": self
    };

    return datastore.save({"key" : key, "data" : pouch}).then(() => {return [key, pouch]});
}


async function get_pouch(pouch_id){
    const key = datastore.key([POUCH, parseInt(pouch_id, 10)]);
    return datastore.get(key).then((entity) => {
        if (entity[0] === undefined || entity[0] === null) {
            // No entity found, Do no add the pouch_id attribute
            return entity;
        } else {
            // Uses Array.map to call function fromDatastore. This function
            // will add the pouch_id attribure to every element in the array entity
            return entity.map(ds.fromDatastore);
        }
  })
}

async function get_pouches(req){
    var q = datastore.createQuery(POUCH).limit(5);
    const results = {};
    if(Object.keys(req.query).includes("cursor")){
        q = q.start(req.query.cursor);
    }
	return datastore.runQuery(q).then( (entities) => {
            results.pouches = entities[0].map(ds.fromDatastore);
            if(entities[1].moreResults !== ds.Datastore.NO_MORE_RESULTS ){
                results.next = req.protocol + "://" + req.get("host") + req.baseUrl + "?cursor=" + entities[1].endCursor;
            }
			return results;
		});
}


async function delete_pouch(pouch_id){

    const pouch_key = datastore.key([POUCH, parseInt(pouch_id,10)]);
    return datastore.get(pouch_key)
    .then( (pouch_entity) => {
        if (pouch_entity[0] === undefined || pouch_entity[0] === null) {
            // No entity found, Do no add the id attribute
            return pouch_entity;
        }
        return datastore.delete(pouch_key);
    });

}


async function put_seed_into_pouch(pouch_id, seed_id){
    const pouch_key = datastore.key([POUCH, parseInt(pouch_id,10)]);
    const seed_key = datastore.key(["Seed", parseInt(seed_id,10)]);
    return datastore.get(pouch_key)
        .then(async (pouch_entity) => {
            return datastore.get(seed_key)
                .then(async (seed_entity) => {
                    if (seed_entity[0] === undefined || seed_entity[0] === null){
                        return seed_entity
                    }
                    else if (seed_entity[0].pouch !== null){
                        return [403]
                    } else {
                        if (typeof(pouch_entity[0].seeds) === 'undefined'){
                            pouch_entity[0].seeds = []
                        }
                        pouch_entity[0].seeds.push({"id": seed_id, "self":URL + "/seeds/" + seed_id})
                        return datastore.save({"key":pouch_key, "data":pouch_entity[0]})
                    }
                })
        })
}


async function assign_seed_to_pouch(pouch_id, seed_id){
    const pouch_key = datastore.key([POUCH, parseInt(pouch_id,10)]);
    const seed_key = datastore.key(["Seed", parseInt(seed_id,10)]);
    return datastore.get(pouch_key)
        .then(async (pouch_entity) => {
            return datastore.get(seed_key)
                .then(async (seed_entity) => {
                    var pouch = {
                        "id":pouch_id,
                        "owner":pouch_entity[0].owner,
                        "self":pouch_entity[0].self}
                    var seed = {
                        "genus":seed_entity[0].genus,
                        "biome":seed_entity[0].biome,
                        "weight":seed_entity[0].weight,
                        "pouch":pouch,
                        "self":seed_entity[0].self
                                }
                    return datastore.save({"key": seed_key, "data": seed})
                        .then(()=> {return [seed_key, seed]})
                })
        })
}

async function remove_seed_from_pouch(pouch_id, seed_id){
    const pouch_key = datastore.key([POUCH, parseInt(pouch_id,10)]);
    const seed_key = datastore.key(["Seed", parseInt(seed_id,10)]);
    return datastore.get(pouch_key)
    .then(async (pouch_entity) => {
        return datastore.get(seed_key)
            .then(async (seed_entity) => {
                if (seed_entity[0] === undefined || seed_entity[0] === null){
                    return seed_entity
                }
                else if (seed_entity[0].pouch === null){
                    return [403]
                } else {

                    const seedLength = pouch_entity[0].seeds.length

                    for (var x = 0; x < seedLength; x++){
                        if (pouch_entity[0].seeds[x].id === String(seed_id)){
                            pouch_entity[0].seeds.splice(x, 1)
                            break
                        }
                    }
                    return datastore.save({"key":pouch_key, "data":pouch_entity[0]})
                }
            })
    })
}

async function clear_seed_pouch(seed_id){
    const seed_key = datastore.key(["Seed", parseInt(seed_id,10)]);
    return datastore.get(seed_key)
    .then(async (seed_entity) => {
        if (seed_entity[0] === undefined || seed_entity[0] === null){
            return seed_entity
        }
        else {
            seed_entity[0].pouch = null
            return datastore.save({"key": seed_key, "data":  seed_entity[0]})
            .then(()=> {return [seed_key,  seed_entity[0]]})
        }
    })
}

/* ----------------- End Model Functions ---------------- */
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
/* ------------- Begin Controller Functions ------------- */

// Create pouch
router.post('/', async function(req, res){

    if (req.get('authorization') === undefined || req.get('authorization') !== "Bearer " + oauth2Client.credentials.id_token){
        res.status(401).json({'Error' : 'Invalid Bearer auth token provided'});
    }

    else if(req.get('content-type') !== 'application/json'){
        res.status(415).json({'Error' : 'Server only accepts application/json data'});
    }

    else if(req.get('accept') !== 'application/json'){
        res.status(406).json({'Error' : 'Server only sends application/json data'})
    }

    // Added a Pouch with missing attributes - 400
    else if (req.body.capacity === undefined || req.body.weathering === undefined || req.body.brand === undefined){
        res.status(400).json({"Error" : "The request object is missing at least one of the required attributes"});
    }

    // Addes a pouch with invalid attributes - 400
    else if (await attributes_are_legal(req.body.capacity, req.body.weathering, req.body.brand) === false){
        res.status(400).json({"Error" : "The request object has at least one illegal attribute type"});
    }

    else if(Object.keys(req.body).length !== 3){
        res.status(400).json({"Error" : "The request object has too many attributes"});
    }

    // Sucessfully create a pouch - 201
    else {
        post_pouch(req.body.capacity, req.body.weathering, req.body.brand)
            .then(key => {patch_pouch(key[0].id, key[1].owner, key[1].capacity, key[1].weathering, key[1].brand, key[1].seeds, URL + "/pouches/" + key[0].id)
                .then(key => {res.status(201).json({"id": + key[0].id, "owner": key[1].owner,
                "capacity": key[1].capacity, "weathering": key[1].weathering, "brand":key[1].brand,
                "seeds":key[1].seeds, "self":key[1].self})
            })
        });
    }
});

router.get('/', async function(req, res){

    if (req.get('authorization') === undefined || req.get('authorization') !== "Bearer " + oauth2Client.credentials.id_token){
        res.status(401).json({'Error' : 'Invalid Bearer auth token provided'});
    }

    else if(req.get('accept') !== 'application/json'){
        res.status(406).json({'Error' : 'Server only sends application/json data'})
    }

    else {
        get_pouches(req)
            .then(async (pouches) => {
                const returningPouches = []
                pouches.pouches.forEach(element => {
                    if (String(element.owner) === String(jsonwebtoken.decode(oauth2Client.credentials.id_token).sub))
                    returningPouches.push(element)
                });
                res.status(200).json(returningPouches)
            })
    }
})


router.get('/:pouch_id', async function(req, res){

    if (req.get('authorization') === undefined || req.get('authorization') !== "Bearer " + oauth2Client.credentials.id_token){
        res.status(401).json({'Error' : 'Invalid Bearer auth token provided'});
    }

    else if(req.get('accept') !== 'application/json'){
        res.status(406).json({'Error' : 'Server only sends application/json data'})
    }

    else {

        get_pouch(req.params.pouch_id)
            .then(pouch => {

                // Invalid pouch id - 404
                if (pouch[0] === undefined || pouch[0] === null) {
                    res.status(404).json({'Error' : 'No pouch with this pouch_id exists'})
                }

                else if (pouch[0].owner !== jsonwebtoken.decode(oauth2Client.credentials.id_token).sub){
                    res.status(403).json({'Error' : 'You do not have permission to view this item'})
                }

                // Sucessfully returned pouch
                else {
                    res.status(200).json(pouch[0]);
                };
            });
    }
})

router.patch('/:pouch_id', async function(req, res){

    if (req.get('authorization') === undefined || req.get('authorization') !== "Bearer " + oauth2Client.credentials.id_token){
        res.status(401).json({'Error' : 'Invalid Bearer auth token provided'});
    }

    // Edited a pouch with invalid content type - 415
    else if(req.get('content-type') !== 'application/json'){
        res.status(415).json({"Error" : 'Server only accepts application/json data'});
    }

    else if(req.get('accept') !== 'application/json'){
        res.status(406).json({'Error' : 'Server only sends application/json data'})
    }

    // Edited a pouch with no attributes
    else if ((req.body.capacity === undefined && req.body.weathering === undefined) && req.body.brand === undefined){
        res.status(400).json({"Error" : "The request object is missing all attributes"});
    }

    // Edited a pouch with invalid attributes - 400
    else if (await attributes_are_legal(req.body.capacity, req.body.weathering, req.body.brand) === false){
        res.status(400).json({"Error" : "The request object has at least one illegal attribute type"});
    }

    else {

        await get_pouch(req.params.pouch_id)
            .then(pouch => {

                // Invalid pouch id - 404
                if (pouch[0] === undefined || pouch[0] === null) {
                    res.status(404).json({'Error' : 'No pouch with this pouch_id exists'})
                }

                else if (pouch[0].owner !== jsonwebtoken.decode(oauth2Client.credentials.id_token).sub){
                    res.status(403).json({'Error' : 'You do not have permission to view this item'})
                }

                // Sucessfully returned pouch
                else {
                    var capacity;
                    var weathering;
                    var brand;

                    if (req.body.capacity === undefined) {
                        capacity = pouch[0].capacity
                    } else {
                        capacity = req.body.capacity
                    }

                    if (req.body.weathering === undefined){
                        weathering = pouch[0].weathering
                    }
                    else {
                        weathering = req.body.weathering
                    }

                    if (req.body.brand === undefined){
                        brand = pouch[0].brand
                    }
                    else {
                        brand = req.body.brand
                    }

                    patch_pouch(req.params.pouch_id, pouch[0].owner, capacity, weathering, brand, pouch[0].seeds, pouch[0].self)
                        .then(key => {
                            res.status(200).json({"id": + key[0].id, "owner": key[1].owner,
                            "capacity": key[1].capacity, "weathering": key[1].weathering, "brand":key[1].brand,
                            "seeds":key[1].seeds, "self":key[1].self})
                        });
                };
            });
    }
})

router.put('/:pouch_id', async function(req, res){

    if (req.get('authorization') === undefined || req.get('authorization') !== "Bearer " + oauth2Client.credentials.id_token){
        res.status(401).json({'Error' : 'Invalid Bearer auth token provided'});
    }

    // Edited a pouch with invalid content type - 415
    else if(req.get('content-type') !== 'application/json'){
        res.status(415).json({"Error" : 'Server only accepts application/json data'});
    }

    // Edited a pouch with invalid accept type - 406
    else if(req.get('accept') !== 'application/json'){
        res.status(406).json({'Error' : 'Server only sends application/json data'})
    }

    // Edited a pouch with no attributes
    else if (req.body.capacity === undefined || req.body.weathering === undefined || req.body.brand === undefined){
        res.status(400).json({"Error" : "The request object is atleast one attribute"});
    }

    // Edited a pouch with invalid attributes - 400
    else if (await attributes_are_legal(req.body.capacity, req.body.weathering, req.body.brand) === false){
        res.status(400).json({"Error" : "The request object has at least one illegal attribute type"});
    }

    else if(Object.keys(req.body).length !== 3){
        res.status(400).json({"Error" : "The request object has at least one illegal attribute type"});
    }

    else {
        get_pouch(req.params.pouch_id)
            .then(pouch => {

                // Invalid pouch id - 404
                if (pouch[0] === undefined || pouch[0] === null) {
                    res.status(404).json({'Error' : 'No pouch with this pouch_id exists'})
                }

                else if (pouch[0].owner !== jsonwebtoken.decode(oauth2Client.credentials.id_token).sub){
                    res.status(403).json({'Error' : 'You do not have permission to view this item'})
                }

                else {
                    put_pouch(req.params.pouch_id, pouch[0].owner, req.body.capacity, req.body.weathering, req.body.brand, pouch[0].seeds, pouch[0].self)
                    .then(key => {
                        res.status(200).json({"id": + key[0].id, "owner": key[1].owner,
                        "capacity": key[1].capacity, "weathering": key[1].weathering, "brand":key[1].brand,
                        "seeds":key[1].seeds, "self":key[1].self})
                    });
                }
            })
    }
})


router.delete('/:pouch_id', async function(req, res){

    if (req.get('authorization') === undefined || req.get('authorization') !== "Bearer " + oauth2Client.credentials.id_token){
        res.status(401).json({'Error' : 'Invalid Bearer auth token provided'});
    }

    // Edited a pouch with invalid accept type - 406
    else if(req.get('accept') !== 'application/json'){
        res.status(406).json({'Error' : 'Server only sends application/json data'})
    }

    else {
        get_pouch(req.params.pouch_id)
            .then(pouch => {

                // Invalid pouch id - 404
                if (pouch[0] === undefined || pouch[0] === null) {
                    res.status(404).json({'Error' : 'No pouch with this pouch_id exists'})
                }

                else if (pouch[0].owner !== jsonwebtoken.decode(oauth2Client.credentials.id_token).sub){
                    res.status(403).json({'Error' : 'You do not have permission to view this item'})
                }

                else {

                    while (pouch[0].seeds.length > 0){
                        clear_seed_pouch(pouch[0].seeds[0].id)
                        pouch[0].seeds.splice(0, 1)
                    }

                    delete_pouch(req.params.pouch_id)
                    .then((entity) => {
                        if (entity[0] === undefined || entity[0] === null) {
                            res.status(404).json({'Error' : 'No pouch with this pouch_id exists'})
                        } else {
                            res.status(204).json(entity[0])
                        }
                    })
                }
            })
        }
})


router.put('/:pouch_id/seeds/:seed_id', async function(req, res){

    if (req.get('authorization') === undefined || req.get('authorization') !== "Bearer " + oauth2Client.credentials.id_token){
        res.status(401).json({'Error' : 'Invalid Bearer auth token provided'});
    }

    else if(req.get('accept') !== 'application/json'){
        res.status(406).json({'Error' : 'Server only sends application/json data'})
    }

    else {
        await get_pouch(req.params.pouch_id)
        .then(async (pouch) => {

            // Invalid pouch id - 404
            if (pouch[0] === undefined || pouch[0] === null) {
                res.status(404).json({'Error' : 'No pouch with this pouch_id exists'})
            }

            else if (pouch[0].owner !== jsonwebtoken.decode(oauth2Client.credentials.id_token).sub){
                res.status(403).json({'Error' : 'You do not have permission to view this item'})
            }
            else {
                await put_seed_into_pouch(req.params.pouch_id, req.params.seed_id)
                .then(entity => {
                    if (entity[0] === undefined || entity[0] === null) {
                        res.status(404).json({'Error' : 'No seed with this seed_id exists'})
                    } else if (entity[0] === 403){
                        res.status(403).json({'Error' : 'The seed is already in a pouch'})
                    } else {
                        assign_seed_to_pouch(req.params.pouch_id, req.params.seed_id)
                        res.status(204).json(entity[0]);
                    }
                })
            }
        })
    }
})

router.delete('/:pouch_id/seeds/:seed_id', async function(req, res){

    if (req.get('authorization') === undefined || req.get('authorization') !== "Bearer " + oauth2Client.credentials.id_token){
        res.status(401).json({'Error' : 'Invalid Bearer auth token provided'});
    }

    // Edited a pouch with invalid accept type - 406
    else if(req.get('accept') !== 'application/json'){
        res.status(406).json({'Error' : 'Server only sends application/json data'})
    }

    else {
        get_pouch(req.params.pouch_id)
            .then(pouch => {

                // Invalid pouch id - 404
                if (pouch[0] === undefined || pouch[0] === null) {
                    res.status(404).json({'Error' : 'No pouch with this pouch_id exists'})
                }

                else if (pouch[0].owner !== jsonwebtoken.decode(oauth2Client.credentials.id_token).sub){
                    res.status(403).json({'Error' : 'You do not have permission to view this item'})
                }

                else {
                    remove_seed_from_pouch(req.params.pouch_id, req.params.seed_id)
                    .then((entity) => {
                        if (entity[0] === undefined || entity[0] === null) {
                            res.status(404).json({'Error' : 'No seed with this seed_id exists'})
                        } else {
                            clear_seed_pouch(req.params.seed_id)
                            .then(()=> {
                                res.status(204).json(entity[0])
                            })
                        }
                    })
                }
            })
        }

})

/* ------------------- Illegal Request ------------------- */

router.delete('/', function(req, res){
    res.set('Accept', 'GET', 'POST')
    res.status(405).json({"Error" : "Method not allowed"})
});

router.patch('/', function(req, res){
    res.set('Accept', 'GET', 'POST')
    res.status(405).json({"Error" : "Method not allowed"})
});

router.put('/', function(req, res){
    res.set('Accept', 'GET', 'POST')
    res.status(405).json({"Error" : "Method not allowed"})
});

/* -------------  End Controller Functions  ------------- */
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
/* ------------- Helper Functions ----------------------- */

async function attributes_are_legal(capacity, weathering, brand){

    if (capacity !== undefined && (typeof capacity !== 'number' || capacity < 0)){
        return false
    }
    else if (weathering !== undefined && (typeof weathering !== "string")){
        return false
    }
    else if (brand !== undefined && (typeof brand !== "string")){
        return false
    }

    return true;
}

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

module.exports = router;